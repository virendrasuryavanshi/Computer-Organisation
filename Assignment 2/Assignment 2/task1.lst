     1                                  
     2                                   	    ;-------------------------------------------------------------------
     3                                              ;   AUTHOR	:	Suryavanshi Virendrasingh		       ;
     4                                     	    ;   ROLL NO	:	B16037					       ;					       
     5                                  	    ;   Objective : To find average marks in each Subject of Students  ; 
     6                                              ;   Input     : Two Matrices A and B		               ; 
     7                                              ;   OutPut    : Addition Matrix C of A nad B                       ;
     8                                              ;                                                                  ;
     9                                              ;-------------------------------------------------------------------
    10                                  
    11                                  
    12                                   %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
    13                                   MAX_Row      EQU    10                                 ; MAXIMUM ROW
    14                                   MAX_Col      EQU    10                                 ; MAXIMUM COLUMN
    15                                  
    16                                  
    17                                   .DATA                                                  ; Define initialized data here
    17                              <1>  segment .data
    18 00000000 456E746572206E756D-           input_prompt    db    "Enter number of row : ",0
    18 00000009 626572206F6620726F-
    18 00000012 77203A2000         
    19 00000017 456E746572206E756D-           input_prompt1   db    "Enter number of column : ",0
    19 00000020 626572206F6620636F-
    19 00000029 6C756D6E203A2000   
    20 00000031 536F7272792C20796F-           input_prompt2   db    "Sorry, you entered undesired value  ",0AH
    20 0000003A 7520656E7465726564-
    20 00000043 20756E646573697265-
    20 0000004C 642076616C75652020-
    20 00000055 0A                 
    21 00000056 5265456E7465722076-                           db    "ReEnter value ...",0
    21 0000005F 616C7565202E2E2E00 
    22 00000068 456E74657220656C65-           input_prompt3   db    "Enter elements of matrix in row major order : ",0
    22 00000071 6D656E7473206F6620-
    22 0000007A 6D617472697820696E-
    22 00000083 20726F77206D616A6F-
    22 0000008C 72206F72646572203A-
    22 00000095 2000               
    23 00000097 526F77206E756D6265-           input_prompt4   db    "Row number : ",0
    23 000000A0 72203A2000         
    24 000000A5 536F7272792C204F75-           input_prompt5   db    "Sorry, Out of Range ( > 1000 ) "
    24 000000AE 74206F662052616E67-
    24 000000B7 652028203E20313030-
    24 000000C0 30202920           
    25 000000C4 456E746572206D6174-           input_prompt6   db    "Enter matrix (Row-major Order) : ",0
    25 000000CD 7269782028526F772D-
    25 000000D6 6D616A6F72204F7264-
    25 000000DF 657229203A2000     
    26 000000E6 4D6174726978203A20-           input_prompt7   db    "Matrix : ",0
    26 000000EF 00                 
    27 000000F0 20202000                      input_prompt8   db    "   ",0
    28                                  
    29                                   .UDATA                                                 ; Define non - initialized data here
    29                              <1>  segment .bss
    30 00000000 <res 00000004>                row             resd  1                           ; Number of row
    31 00000004 <res 00000004>                col             resd  1                           ; Number of column
    32 00000008 <res 00000190>                a_matrix        resd  100                         ; Matrix A
    33 00000198 <res 00000190>                b_matrix        resd  100                         ; Matrix B
    34 00000328 <res 00000190>                c_matrix        resd  100                         ; Matrix C  =  A + B
    35                                   .CODE
    35                              <1>  segment .data
    35                              <1>  segment .bss
    35                              <1>  segment .text
    36                                        .STARTUP                                          ; start main function
    36                              <1> 
    36                              <1>  global _start
    36                              <1> _start:
    37                                    go_row:                                               ; label for geting row
    38                                        PutStr          input_prompt                      ; User request for number of row
    38 00000000 51                  <1>  push ECX
    38 00000001 B9[00000000]        <1>  mov ECX,%1
    38 00000006 E8(00000000)        <1>  call proc_PutStr
    38 0000000B 59                  <1>  pop ECX
    39                                        GetLInt         EAX                               ; get row from user
    39                              <1> %ifnidni %1,EAX
    39                              <1>  push EAX
    39                              <1>  call proc_GetLInt
    39                              <1>  mov %1,EAX
    39                              <1>  pop EAX
    39                              <1> %else
    39 0000000C E8(00000000)        <1>  call proc_GetLInt
    39                              <1> %endif
    40 00000011 83F801                        cmp             EAX,1                             ; row is less than one
    41 00000014 7C6F                          jl              error_row                         ; if so, go error_row
    42 00000016 83F80A                        cmp             EAX,MAX_Row                       ; row is greater than MAX_Row
    43 00000019 7F6A                          jg              error_row                         ; if so, go error_row
    44 0000001B A3[00000000]                  mov             dword [row] , EAX                 ; otherwise, mov EAX value in row variable
    45                                    
    46                                    go_col:                                               ; label for getting column                   
    47                                        PutStr          input_prompt1                     ; User request for number of column
    47 00000020 51                  <1>  push ECX
    47 00000021 B9[17000000]        <1>  mov ECX,%1
    47 00000026 E8(00000000)        <1>  call proc_PutStr
    47 0000002B 59                  <1>  pop ECX
    48                                        GetLInt         EAX                               ; get column from user
    48                              <1> %ifnidni %1,EAX
    48                              <1>  push EAX
    48                              <1>  call proc_GetLInt
    48                              <1>  mov %1,EAX
    48                              <1>  pop EAX
    48                              <1> %else
    48 0000002C E8(00000000)        <1>  call proc_GetLInt
    48                              <1> %endif
    49 00000031 83F801                        cmp             EAX,1                             ; column is less than one
    50 00000034 7C65                          jl              error_col                         ; if so, go error_col
    51 00000036 83F80A                        cmp             EAX,MAX_Col                       ; column is greater than MAX_Col
    52 00000039 7F60                          jg              error_col                         ; if so, go error_col
    53 0000003B A3[04000000]                  mov             dword [col] , EAX                 ; otherwise, mov EAX value in col variable
    54                                       
    55 00000040 F725[00000000]                mul             dword [row]                       ; total element in a matrix
    56 00000046 BB[08000000]                  mov             EBX,a_matrix                      ; mov a_matrix pointer in EBX
    57 0000004B 53                            push            EBX                               ; push a_matrix pointer
    58 0000004C 50                            push            EAX                               ; push total element of matrix
    59                                        
    60 0000004D E8C9000000                    call            read_matrix                       ; call function for read matrix A
    61                                       
    62 00000052 BB[98010000]                  mov             EBX ,b_matrix                     ; mov b_matrix pointer in EBX
    63 00000057 53                            push            EBX                               ; push b_matrix pointer
    64 00000058 50                            push            EAX                               ; push total element of matrix
    65                                      
    66 00000059 E8BD000000                    call            read_matrix                       ; call function for read matrix B
    67                                  
    68 0000005E BA[08000000]                  mov             EDX,a_matrix                      ; mov a_matrix pointer in EDX
    69 00000063 B9[28030000]                  mov             ECX ,c_matrix                     ; mov c_matrix pointer in ECX
    70                                  
    71 00000068 51                            push            ECX                               ; push c_matrix pointer
    72 00000069 53                            push            EBX                               ; push b_matrix pointer
    73 0000006A 52                            push            EDX                               ; push a_matrix pointer
    74 0000006B 50                            push            EAX                               ; push total element of matrix
    75                                  
    76 0000006C E8E2000000                    call            add_matrix                        ; call function for Add two matrix 
    77                                  
    78 00000071 51                            push            ECX                               ; push c_matrix pointer
    79 00000072 FF35[00000000]                push            dword [row]                       ; push number of row
    80 00000078 FF35[04000000]                push            dword [col]                       ; push number of column
    81                                  
    82 0000007E E837000000                    call            print_matrix                      ; call function for print matrix
    83                                  
    84 00000083 EB2C                          jmp             done                              ; now , we are done
    85                                  
    86                                    error_row:                                            ; label for error of row
    87                                        PutStr          input_prompt2                     ; show error message
    87 00000085 51                  <1>  push ECX
    87 00000086 B9[31000000]        <1>  mov ECX,%1
    87 0000008B E8(00000000)        <1>  call proc_PutStr
    87 00000090 59                  <1>  pop ECX
    88                                        nwln                                              ; print new line
    88 00000091 E8(00000000)        <1>  call proc_nwln
    89 00000096 E965FFFFFF                    jmp             go_row                            ; go back to read row
    90                                  
    91                                    error_col:                                            ; label for error of column
    92                                        PutStr          input_prompt2                     ; show error message
    92 0000009B 51                  <1>  push ECX
    92 0000009C B9[31000000]        <1>  mov ECX,%1
    92 000000A1 E8(00000000)        <1>  call proc_PutStr
    92 000000A6 59                  <1>  pop ECX
    93                                        nwln                                              ; print new line
    93 000000A7 E8(00000000)        <1>  call proc_nwln
    94 000000AC E96FFFFFFF                    jmp             go_col                            ; go back to read column
    95                                  
    96                                    done:                                                 ; label for done
    97                                        .EXIT                                             ; EXIT from program
    97 000000B1 B801000000          <1>  mov EAX,1
    97 000000B6 31DB                <1>  xor EBX,EBX
    97 000000B8 CD80                <1>  int 0x80
    98                                       
    99                                  
   100                                    print_matrix:                                         ; function for print a matrix
   101 000000BA C8000000                      enter 0,0                                         ; allocate stack frame with zero local variable
   102 000000BE 50                            push  EAX                                         ; save EAX register
   103 000000BF 53                            push  EBX                                         ; save EBX register
   104 000000C0 51                            push  ECX                                         ; save ECX register
   105 000000C1 52                            push  EDX                                         ; save EDX register
   106                                  
   107 000000C2 8B5D10                        mov   EBX , [EBP+16]                              ; mov matrix pointer in EBX
   108 000000C5 8B4D0C                        mov   ECX , [EBP+12]                              ; mov row in ECX
   109 000000C8 8B4508                        mov   EAX , [EBP +8]                              ; mov column in EAX
   110                                        
   111                                        
   112                                        PutStr   input_prompt7                            ; display matrix
   112 000000CB 51                  <1>  push ECX
   112 000000CC B9[E6000000]        <1>  mov ECX,%1
   112 000000D1 E8(00000000)        <1>  call proc_PutStr
   112 000000D6 59                  <1>  pop ECX
   113                                        nwln                                              ; print new line
   113 000000D7 E8(00000000)        <1>  call proc_nwln
   114                                  
   115 000000DC 31F6                          xor  ESI,ESI                                      ; clear ESI
   116                                  
   117                                        print:                                            ; label for print a row
   118                                        nwln                                              ; print new line
   118 000000DE E8(00000000)        <1>  call proc_nwln
   119 000000E3 51                               push ECX                                       ; save ECX 
   120 000000E4 31C9                             xor ECX , ECX                                  ; clear ECX
   121                                         
   122                                           print_col:                                     ; lebel for column        
   123                                          
   124                                             PutLInt  [EBX]                               ; print element
   124 000000E6 50                  <1>  push EAX
   124 000000E7 8B03                <1>  mov EAX,%1
   124 000000E9 E8(00000000)        <1>  call proc_PutLInt
   124 000000EE 58                  <1>  pop EAX
   125                                             PutStr   input_prompt8                       ; put space
   125 000000EF 51                  <1>  push ECX
   125 000000F0 B9[F0000000]        <1>  mov ECX,%1
   125 000000F5 E8(00000000)        <1>  call proc_PutStr
   125 000000FA 59                  <1>  pop ECX
   126 000000FB 83C304                             add  EBX,4                                   ; add 4 in EBX pointer
   127 000000FE 41                                 inc ECX                                      ; ECX = ECX + 1
   128 000000FF 39C8                               cmp  EAX,ECX                                 ; compare ECX to column
   129 00000101 75E3                               jne   print_col                              ; ECX != column , go for print next element
   130                                           
   131 00000103 59                               pop ECX                                        ; otherwise, restore ECX                                
   132 00000104 46                               inc   ESI                                      ; ESI = ESI + 1
   133 00000105 39CE                             cmp   ESI , ECX                                ; compare ESI to row
   134 00000107 75D5                             jne   print                                    ; ESI != row , go for print next row 
   135                                         
   136                                       nwln                                               ; otherwise, print new line
   136 00000109 E8(00000000)        <1>  call proc_nwln
   137 0000010E 5A                           pop EDX                                            ; restore EDX
   138 0000010F 59                           pop ECX                                            ; restore ECX
   139 00000110 5B                           pop EBX                                            ; restore EBX
   140 00000111 58                           pop EAX                                            ; restore EAX
   141                                       nwln                                               ; print new line
   141 00000112 E8(00000000)        <1>  call proc_nwln
   142 00000117 C9                           leave                                              ; release procedure entery
   143 00000118 C20C00                       ret   12                                           ; return and remove passing parameters
   144                                   
   145                                   read_matrix:                                           ; function for read a matrix
   146 0000011B C8000000                     enter 0,0                                          ; allocate stack frame with zero local variable
   147 0000011F 50                           push  EAX                                          ; save EAX register
   148 00000120 53                           push  EBX                                          ; save EBX register
   149 00000121 51                           push  ECX                                          ; save ECX register
   150 00000122 52                           push  EDX                                          ; save EDX register
   151                                  
   152 00000123 8B5D0C                       mov   EBX , [EBP+12]                               ; mov a matrix pointer in EBX
   153 00000126 8B4D08                       mov   ECX , [EBP+8]                                ; mov total elements in ECX
   154                                        
   155                                       
   156                                       PutStr   input_prompt6                             ; get matrix in row mazor order
   156 00000129 51                  <1>  push ECX
   156 0000012A B9[C4000000]        <1>  mov ECX,%1
   156 0000012F E8(00000000)        <1>  call proc_PutStr
   156 00000134 59                  <1>  pop ECX
   157                                       nwln                                               ; print new line
   157 00000135 E8(00000000)        <1>  call proc_nwln
   158                                      
   159 0000013A 31F6                         xor  ESI,ESI                                       ; clear ESI 
   160                                       
   161                                       read_element:                                      ; label for read element 
   162                                  
   163                                            GetLInt  EAX                                  ; get element
   163                              <1> %ifnidni %1,EAX
   163                              <1>  push EAX
   163                              <1>  call proc_GetLInt
   163                              <1>  mov %1,EAX
   163                              <1>  pop EAX
   163                              <1> %else
   163 0000013C E8(00000000)        <1>  call proc_GetLInt
   163                              <1> %endif
   164 00000141 8903                              mov [EBX] , EAX                               ; move element in EBX
   165 00000143 46                                inc   ESI                                     ; ESI = ESI + 1
   166 00000144 83C304                            add  EBX,4                                    ; add 4 in EBX for next element
   167 00000147 39CE                              cmp   ESI , ECX                               ; ESI != ECX
   168 00000149 75F1                              jne   read_element                            ; if so, go back for read next element 
   169                                         
   170 0000014B 5A                           pop EDX                                            ; restore EDX
   171 0000014C 59                           pop ECX                                            ; restore ECX
   172 0000014D 5B                           pop EBX                                            ; restore EBX
   173 0000014E 58                           pop EAX                                            ; restore EAX
   174                                       
   175 0000014F C9                           leave                                              ; release procedure entery         
   176 00000150 C20800                       ret   8                                            ; return and remove passing parameters
   177                                  
   178                                   add_matrix:                                            ; function for Add two matrix
   179 00000153 C8000000                     enter 0,0
   180 00000157 50                           push  EAX                                          ; save EAX register
   181 00000158 53                           push  EBX                                          ; save EBX register
   182 00000159 51                           push  ECX                                          ; save ECX register
   183 0000015A 52                           push  EDX                                          ; save EDX register
   184                                  
   185 0000015B 8B5D0C                       mov   EBX , [EBP+12]                               ; mov a_matrix pointer in EBX                           
   186 0000015E 8B5510                       mov   EDX , [EBP+16]                               ; mov b_matrix pointer in EDX
   187 00000161 8B4514                       mov   EAX , [EBP+20]                               ; mov c_matrix pointer in EAX
   188 00000164 8B4D08                       mov   ECX , [EBP+8]                                ; mov total element in ECX
   189                                        
   190                                      
   191                                       nwln                                               ; print new line
   191 00000167 E8(00000000)        <1>  call proc_nwln
   192 0000016C 31F6                         xor  ESI,ESI                                       ; clear ESI
   193                                      
   194                                       add_e:                                             ; label for add element
   195                                   
   196 0000016E 51                                 push ECX                                     ; save ECX for store [EBX] + [EDX]
   197 0000016F 8B0B                               mov  ECX ,[EBX]                              ; mov [EBX] in ECX
   198 00000171 030A                               add  ECX ,[EDX]                              ; ECX = [EBX] + [EDX]
   199 00000173 8908                               mov  [EAX] ,ECX                              ; mov ECX in [EAX]
   200 00000175 59                                 pop  ECX                                     ; restore ECX
   201                                             
   202 00000176 46                                 inc  ESI                                     ; ESI = ESI + 1
   203 00000177 83C304                             add  EBX ,4                                  ; add 4 in EBX for next element
   204 0000017A 83C204                             add  EDX ,4                                  ; add 4 in EDX for next element
   205 0000017D 83C004                             add  EAX ,4                                  ; add 4 in EAX for next element
   206 00000180 39CE                               cmp  ESI ,ECX                                ; ESI != ECX
   207 00000182 75EA                               jne   add_e                                  ; if so, go back add another element
   208                                         
   209                                       
   210 00000184 5A                           pop EDX                                            ; restore EDX
   211 00000185 59                           pop ECX                                            ; restore ECX
   212 00000186 5B                           pop EBX                                            ; resotre EBX
   213 00000187 58                           pop EAX                                            ; restore EAX
   214                                  
   215 00000188 C9                           leave                                              ; release procedure entery                                        
   216 00000189 C21000                       ret   16                                           ; return and remove passing parameters
