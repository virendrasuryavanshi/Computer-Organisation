     1                                   %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     2                                   MAX_Row      EQU    10                                 ; MAXIMUM ROW
     3                                   MAX_Col      EQU    10                                 ; MAXIMUM COLUMN
     4                                  
     5                                  
     6                                   .DATA                                                  ; Define initialized data here
     6                              <1>  segment .data
     7 00000000 456E746572206E756D-           input_prompt    db    "Enter number of row : ",0
     7 00000009 626572206F6620726F-
     7 00000012 77203A2000         
     8 00000017 456E746572206E756D-           input_prompt1   db    "Enter number of column : ",0
     8 00000020 626572206F6620636F-
     8 00000029 6C756D6E203A2000   
     9 00000031 536F7272792C20796F-           input_prompt2   db    "Sorry, you entered undesired value  ",0AH
     9 0000003A 7520656E7465726564-
     9 00000043 20756E646573697265-
     9 0000004C 642076616C75652020-
     9 00000055 0A                 
    10 00000056 5265456E7465722076-                           db    "ReEnter value ...",0
    10 0000005F 616C7565202E2E2E00 
    11 00000068 456E74657220656C65-           input_prompt3   db    "Enter elements of matrix in row major order : ",0
    11 00000071 6D656E7473206F6620-
    11 0000007A 6D617472697820696E-
    11 00000083 20726F77206D616A6F-
    11 0000008C 72206F72646572203A-
    11 00000095 2000               
    12 00000097 526F77206E756D6265-           input_prompt4   db    "Row number : ",0
    12 000000A0 72203A2000         
    13 000000A5 536F7272792C204F75-           input_prompt5   db    "Sorry, Out of Range ( > 1000 ) "
    13 000000AE 74206F662052616E67-
    13 000000B7 652028203E20313030-
    13 000000C0 30202920           
    14 000000C4 456E746572206D6174-           input_prompt6   db    "Enter matrix (Row-major Order) : ",0
    14 000000CD 7269782028526F772D-
    14 000000D6 6D616A6F72204F7264-
    14 000000DF 657229203A2000     
    15 000000E6 4D6174726978203A20-           input_prompt7   db    "Matrix : ",0
    15 000000EF 00                 
    16 000000F0 20202000                      input_prompt8   db    "   ",0
    17                                  
    18                                   .UDATA                                                 ; Define non - initialized data here
    18                              <1>  segment .bss
    19 00000000 <res 00000004>                row             resd  1                           ; Number of row
    20 00000004 <res 00000004>                col             resd  1                           ; Number of column
    21 00000008 <res 00000190>                a_matrix        resd  100                         ; Matrix A
    22 00000198 <res 00000190>                b_matrix        resd  100                         ; Matrix B
    23 00000328 <res 00000190>                c_matrix        resd  100                         ; Matrix C  =  A + B
    24                                   .CODE
    24                              <1>  segment .data
    24                              <1>  segment .bss
    24                              <1>  segment .text
    25                                        .STARTUP                                          ; start main function
    25                              <1> 
    25                              <1>  global _start
    25                              <1> _start:
    26                                    go_row:                                               ; label for geting row
    27                                        PutStr          input_prompt                      ; User request for number of row
    27 00000000 51                  <1>  push ECX
    27 00000001 B9[00000000]        <1>  mov ECX,%1
    27 00000006 E8(00000000)        <1>  call proc_PutStr
    27 0000000B 59                  <1>  pop ECX
    28                                        GetLInt         EAX                               ; get row from user
    28                              <1> %ifnidni %1,EAX
    28                              <1>  push EAX
    28                              <1>  call proc_GetLInt
    28                              <1>  mov %1,EAX
    28                              <1>  pop EAX
    28                              <1> %else
    28 0000000C E8(00000000)        <1>  call proc_GetLInt
    28                              <1> %endif
    29 00000011 83F801                        cmp             EAX,1                             ; row is less than one
    30 00000014 7C6F                          jl              error_row                         ; if so, go error_row
    31 00000016 83F80A                        cmp             EAX,MAX_Row                       ; row is greater than MAX_Row
    32 00000019 7F6A                          jg              error_row                         ; if so, go error_row
    33 0000001B A3[00000000]                  mov             dword [row] , EAX                 ; otherwise, mov EAX value in row variable
    34                                    
    35                                    go_col:                                               ; label for getting column                   
    36                                        PutStr          input_prompt1                     ; User request for number of column
    36 00000020 51                  <1>  push ECX
    36 00000021 B9[17000000]        <1>  mov ECX,%1
    36 00000026 E8(00000000)        <1>  call proc_PutStr
    36 0000002B 59                  <1>  pop ECX
    37                                        GetLInt         EAX                               ; get column from user
    37                              <1> %ifnidni %1,EAX
    37                              <1>  push EAX
    37                              <1>  call proc_GetLInt
    37                              <1>  mov %1,EAX
    37                              <1>  pop EAX
    37                              <1> %else
    37 0000002C E8(00000000)        <1>  call proc_GetLInt
    37                              <1> %endif
    38 00000031 83F801                        cmp             EAX,1                             ; column is less than one
    39 00000034 7C65                          jl              error_col                         ; if so, go error_col
    40 00000036 83F80A                        cmp             EAX,MAX_Col                       ; column is greater than MAX_Col
    41 00000039 7F60                          jg              error_col                         ; if so, go error_col
    42 0000003B A3[04000000]                  mov             dword [col] , EAX                 ; otherwise, mov EAX value in col variable
    43                                       
    44 00000040 F725[00000000]                mul             dword [row]                       ; total element in a matrix
    45 00000046 BB[08000000]                  mov             EBX,a_matrix                      ; mov a_matrix pointer in EBX
    46 0000004B 53                            push            EBX                               ; push a_matrix pointer
    47 0000004C 50                            push            EAX                               ; push total element of matrix
    48                                        
    49 0000004D E8C9000000                    call            read_matrix                       ; call function for read matrix A
    50                                       
    51 00000052 BB[98010000]                  mov             EBX ,b_matrix                     ; mov b_matrix pointer in EBX
    52 00000057 53                            push            EBX                               ; push b_matrix pointer
    53 00000058 50                            push            EAX                               ; push total element of matrix
    54                                      
    55 00000059 E8BD000000                    call            read_matrix                       ; call function for read matrix B
    56                                  
    57 0000005E BA[08000000]                  mov             EDX,a_matrix                      ; mov a_matrix pointer in EDX
    58 00000063 B9[28030000]                  mov             ECX ,c_matrix                     ; mov c_matrix pointer in ECX
    59                                  
    60 00000068 51                            push            ECX                               ; push c_matrix pointer
    61 00000069 53                            push            EBX                               ; push b_matrix pointer
    62 0000006A 52                            push            EDX                               ; push a_matrix pointer
    63 0000006B 50                            push            EAX                               ; push total element of matrix
    64                                  
    65 0000006C E8E2000000                    call            add_matrix                        ; call function for Add two matrix 
    66                                  
    67 00000071 51                            push            ECX                               ; push c_matrix pointer
    68 00000072 FF35[00000000]                push            dword [row]                       ; push number of row
    69 00000078 FF35[04000000]                push            dword [col]                       ; push number of column
    70                                  
    71 0000007E E837000000                    call            print_matrix                      ; call function for print matrix
    72                                  
    73 00000083 EB2C                          jmp             done                              ; now , we are done
    74                                  
    75                                    error_row:                                            ; label for error of row
    76                                        PutStr          input_prompt2                     ; show error message
    76 00000085 51                  <1>  push ECX
    76 00000086 B9[31000000]        <1>  mov ECX,%1
    76 0000008B E8(00000000)        <1>  call proc_PutStr
    76 00000090 59                  <1>  pop ECX
    77                                        nwln                                              ; print new line
    77 00000091 E8(00000000)        <1>  call proc_nwln
    78 00000096 E965FFFFFF                    jmp             go_row                            ; go back to read row
    79                                  
    80                                    error_col:                                            ; label for error of column
    81                                        PutStr          input_prompt2                     ; show error message
    81 0000009B 51                  <1>  push ECX
    81 0000009C B9[31000000]        <1>  mov ECX,%1
    81 000000A1 E8(00000000)        <1>  call proc_PutStr
    81 000000A6 59                  <1>  pop ECX
    82                                        nwln                                              ; print new line
    82 000000A7 E8(00000000)        <1>  call proc_nwln
    83 000000AC E96FFFFFFF                    jmp             go_col                            ; go back to read column
    84                                  
    85                                    done:                                                 ; label for done
    86                                        .EXIT                                             ; EXIT from program
    86 000000B1 B801000000          <1>  mov EAX,1
    86 000000B6 31DB                <1>  xor EBX,EBX
    86 000000B8 CD80                <1>  int 0x80
    87                                       
    88                                  
    89                                    print_matrix:                                         ; function for print a matrix
    90 000000BA C8000000                      enter 0,0                                         ; allocate stack frame with zero local variable
    91 000000BE 50                            push  EAX                                         ; save EAX register
    92 000000BF 53                            push  EBX                                         ; save EBX register
    93 000000C0 51                            push  ECX                                         ; save ECX register
    94 000000C1 52                            push  EDX                                         ; save EDX register
    95                                  
    96 000000C2 8B5D10                        mov   EBX , [EBP+16]                              ; mov matrix pointer in EBX
    97 000000C5 8B4D0C                        mov   ECX , [EBP+12]                              ; mov row in ECX
    98 000000C8 8B4508                        mov   EAX , [EBP +8]                              ; mov column in EAX
    99                                        
   100                                        
   101                                        PutStr   input_prompt7                            ; display matrix
   101 000000CB 51                  <1>  push ECX
   101 000000CC B9[E6000000]        <1>  mov ECX,%1
   101 000000D1 E8(00000000)        <1>  call proc_PutStr
   101 000000D6 59                  <1>  pop ECX
   102                                        nwln                                              ; print new line
   102 000000D7 E8(00000000)        <1>  call proc_nwln
   103                                  
   104 000000DC 31F6                          xor  ESI,ESI                                      ; clear ESI
   105                                  
   106                                        print:                                            ; label for print a row
   107                                        nwln                                              ; print new line
   107 000000DE E8(00000000)        <1>  call proc_nwln
   108 000000E3 51                               push ECX                                       ; save ECX 
   109 000000E4 31C9                             xor ECX , ECX                                  ; clear ECX
   110                                         
   111                                           print_col:                                     ; lebel for column        
   112                                          
   113                                             PutLInt  [EBX]                               ; print element
   113 000000E6 50                  <1>  push EAX
   113 000000E7 8B03                <1>  mov EAX,%1
   113 000000E9 E8(00000000)        <1>  call proc_PutLInt
   113 000000EE 58                  <1>  pop EAX
   114                                             PutStr   input_prompt8                       ; put space
   114 000000EF 51                  <1>  push ECX
   114 000000F0 B9[F0000000]        <1>  mov ECX,%1
   114 000000F5 E8(00000000)        <1>  call proc_PutStr
   114 000000FA 59                  <1>  pop ECX
   115 000000FB 83C304                             add  EBX,4                                   ; add 4 in EBX pointer
   116 000000FE 41                                 inc ECX                                      ; ECX = ECX + 1
   117 000000FF 39C8                               cmp  EAX,ECX                                 ; compare ECX to column
   118 00000101 75E3                               jne   print_col                              ; ECX != column , go for print next element
   119                                           
   120 00000103 59                               pop ECX                                        ; otherwise, restore ECX                                
   121 00000104 46                               inc   ESI                                      ; ESI = ESI + 1
   122 00000105 39CE                             cmp   ESI , ECX                                ; compare ESI to row
   123 00000107 75D5                             jne   print                                    ; ESI != row , go for print next row 
   124                                         
   125                                       nwln                                               ; otherwise, print new line
   125 00000109 E8(00000000)        <1>  call proc_nwln
   126 0000010E 5A                           pop EDX                                            ; restore EDX
   127 0000010F 59                           pop ECX                                            ; restore ECX
   128 00000110 5B                           pop EBX                                            ; restore EBX
   129 00000111 58                           pop EAX                                            ; restore EAX
   130                                       nwln                                               ; print new line
   130 00000112 E8(00000000)        <1>  call proc_nwln
   131 00000117 C9                           leave                                              ; release procedure entery
   132 00000118 C20C00                       ret   12                                           ; return and remove passing parameters
   133                                   
   134                                   read_matrix:                                           ; function for read a matrix
   135 0000011B C8000000                     enter 0,0                                          ; allocate stack frame with zero local variable
   136 0000011F 50                           push  EAX                                          ; save EAX register
   137 00000120 53                           push  EBX                                          ; save EBX register
   138 00000121 51                           push  ECX                                          ; save ECX register
   139 00000122 52                           push  EDX                                          ; save EDX register
   140                                  
   141 00000123 8B5D0C                       mov   EBX , [EBP+12]                               ; mov a matrix pointer in EBX
   142 00000126 8B4D08                       mov   ECX , [EBP+8]                                ; mov total elements in ECX
   143                                        
   144                                       
   145                                       PutStr   input_prompt6                             ; get matrix in row mazor order
   145 00000129 51                  <1>  push ECX
   145 0000012A B9[C4000000]        <1>  mov ECX,%1
   145 0000012F E8(00000000)        <1>  call proc_PutStr
   145 00000134 59                  <1>  pop ECX
   146                                       nwln                                               ; print new line
   146 00000135 E8(00000000)        <1>  call proc_nwln
   147                                      
   148 0000013A 31F6                         xor  ESI,ESI                                       ; clear ESI 
   149                                       
   150                                       read_element:                                      ; label for read element 
   151                                  
   152                                            GetLInt  EAX                                  ; get element
   152                              <1> %ifnidni %1,EAX
   152                              <1>  push EAX
   152                              <1>  call proc_GetLInt
   152                              <1>  mov %1,EAX
   152                              <1>  pop EAX
   152                              <1> %else
   152 0000013C E8(00000000)        <1>  call proc_GetLInt
   152                              <1> %endif
   153 00000141 8903                              mov [EBX] , EAX                               ; move element in EBX
   154 00000143 46                                inc   ESI                                     ; ESI = ESI + 1
   155 00000144 83C304                            add  EBX,4                                    ; add 4 in EBX for next element
   156 00000147 39CE                              cmp   ESI , ECX                               ; ESI != ECX
   157 00000149 75F1                              jne   read_element                            ; if so, go back for read next element 
   158                                         
   159 0000014B 5A                           pop EDX                                            ; restore EDX
   160 0000014C 59                           pop ECX                                            ; restore ECX
   161 0000014D 5B                           pop EBX                                            ; restore EBX
   162 0000014E 58                           pop EAX                                            ; restore EAX
   163                                       
   164 0000014F C9                           leave                                              ; release procedure entery         
   165 00000150 C20800                       ret   8                                            ; return and remove passing parameters
   166                                  
   167                                   add_matrix:                                            ; function for Add two matrix
   168 00000153 C8000000                     enter 0,0
   169 00000157 50                           push  EAX                                          ; save EAX register
   170 00000158 53                           push  EBX                                          ; save EBX register
   171 00000159 51                           push  ECX                                          ; save ECX register
   172 0000015A 52                           push  EDX                                          ; save EDX register
   173                                  
   174 0000015B 8B5D0C                       mov   EBX , [EBP+12]                               ; mov a_matrix pointer in EBX                           
   175 0000015E 8B5510                       mov   EDX , [EBP+16]                               ; mov b_matrix pointer in EDX
   176 00000161 8B4514                       mov   EAX , [EBP+20]                               ; mov c_matrix pointer in EAX
   177 00000164 8B4D08                       mov   ECX , [EBP+8]                                ; mov total element in ECX
   178                                        
   179                                      
   180                                       nwln                                               ; print new line
   180 00000167 E8(00000000)        <1>  call proc_nwln
   181 0000016C 31F6                         xor  ESI,ESI                                       ; clear ESI
   182                                      
   183                                       add_e:                                             ; label for add element
   184                                   
   185 0000016E 51                                 push ECX                                     ; save ECX for store [EBX] + [EDX]
   186 0000016F 8B0B                               mov  ECX ,[EBX]                              ; mov [EBX] in ECX
   187 00000171 030A                               add  ECX ,[EDX]                              ; ECX = [EBX] + [EDX]
   188 00000173 8908                               mov  [EAX] ,ECX                              ; mov ECX in [EAX]
   189 00000175 59                                 pop  ECX                                     ; restore ECX
   190                                             
   191 00000176 46                                 inc  ESI                                     ; ESI = ESI + 1
   192 00000177 83C304                             add  EBX ,4                                  ; add 4 in EBX for next element
   193 0000017A 83C204                             add  EDX ,4                                  ; add 4 in EDX for next element
   194 0000017D 83C004                             add  EAX ,4                                  ; add 4 in EAX for next element
   195 00000180 39CE                               cmp  ESI ,ECX                                ; ESI != ECX
   196 00000182 75EA                               jne   add_e                                  ; if so, go back add another element
   197                                         
   198                                       
   199 00000184 5A                           pop EDX                                            ; restore EDX
   200 00000185 59                           pop ECX                                            ; restore ECX
   201 00000186 5B                           pop EBX                                            ; resotre EBX
   202 00000187 58                           pop EAX                                            ; restore EAX
   203                                  
   204 00000188 C9                           leave                                              ; release procedure entery                                        
   205 00000189 C21000                       ret   16                                           ; return and remove passing parameters
