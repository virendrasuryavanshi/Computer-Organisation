     1                                  
     2                                  
     3                                              ;-------------------------------------------------------------------
     4                                              ;   AUTHOR	:	Suryavanshi Virendrasingh		       ;
     5                                     	    ;   ROLL NO	:	B16037					       ;					       
     6                                  	    ;   Objective : To find average marks in each Subject of Students  ; 
     7                                              ;   Input     : String of Digits		                       ; 
     8                                              ;   OutPut    : Encryption of String                               ;
     9                                              ;                                                                  ;
    10                                              ;-------------------------------------------------------------------
    11                                  
    12                                  
    13                                  %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
    14                                  
    15                                  .DATA
    15                              <1>  segment .data
    16 00000000 456E74657220746865-     	msg_ask	db "Enter the string: ",0
    16 00000009 20737472696E673A20-
    16 00000012 00                 
    17 00000013 46696E616C20737472-     	msg_ans	db "Final string is: ",0
    17 0000001C 696E672069733A2000 
    18 00000025 456E74657220616E6F-     	msg_y_n db "Enter another string? (Y/y to continue)",0
    18 0000002E 746865722073747269-
    18 00000037 6E673F2028592F7920-
    18 00000040 746F20636F6E74696E-
    18 00000049 75652900           
    19 0000004D 343639353033313837-     	convert db "4695031872"
    19 00000056 32                 
    20                                  
    21                                  .UDATA
    21                              <1>  segment .bss
    22 00000000 <res 000000C8>          	inp_str resb 200
    23 000000C8 <res 00000001>          	inp_y_n resb 1
    24                                  
    25                                  .CODE
    25                              <1>  segment .data
    25                              <1>  segment .bss
    25                              <1>  segment .text
    26                                  	.STARTUP
    26                              <1> 
    26                              <1>  global _start
    26                              <1> _start:
    27                                  	L1:
    28                                  		PutStr msg_ask
    28 00000000 51                  <1>  push ECX
    28 00000001 B9[00000000]        <1>  mov ECX,%1
    28 00000006 E8(00000000)        <1>  call proc_PutStr
    28 0000000B 59                  <1>  pop ECX
    29                                  		GetStr inp_str
    29 0000000C 56                  <1>  push ESI
    29 0000000D 57                  <1>  push EDI
    29 0000000E BF[00000000]        <1>  mov EDI,%1
    29 00000013 BE51000000          <1>  mov ESI,%2
    29 00000018 E8(00000000)        <1>  call proc_GetStr
    29 0000001D 5F                  <1>  pop EDI
    29 0000001E 5E                  <1>  pop ESI
    30 0000001F B8[00000000]            		mov EAX,inp_str
    31                                  		L2:
    32 00000024 8A18                    			mov BL,byte[EAX]
    33 00000026 B130                    			mov CL,'0'
    34 00000028 BA00000000              			mov EDX,0
    35                                  			L3:	
    36 0000002D 38D9                    				cmp CL,BL
    37 0000002F 740A                    				je true
    38 00000031 80F939                  				cmp CL,'9'
    39 00000034 740F                    				je inpInc
    40 00000036 42                      				inc EDX
    41 00000037 FEC1                    				inc CL
    42 00000039 EBF2                    				jmp L3
    43                                  				true:
    44 0000003B 8A9A[4D000000]          					mov BL,byte[convert+EDX]
    45 00000041 8818                    					mov byte[EAX],BL
    46 00000043 EB00                    					jmp inpInc
    47                                  			inpInc:
    48 00000045 40                      				inc EAX
    49 00000046 3C00                    				cmp AL,0
    50 00000048 75DA                    				jne L2
    51                                  		PutStr msg_ans
    51 0000004A 51                  <1>  push ECX
    51 0000004B B9[13000000]        <1>  mov ECX,%1
    51 00000050 E8(00000000)        <1>  call proc_PutStr
    51 00000055 59                  <1>  pop ECX
    52                                  		PutStr inp_str
    52 00000056 51                  <1>  push ECX
    52 00000057 B9[00000000]        <1>  mov ECX,%1
    52 0000005C E8(00000000)        <1>  call proc_PutStr
    52 00000061 59                  <1>  pop ECX
    53                                  		nwln
    53 00000062 E8(00000000)        <1>  call proc_nwln
    54                                  		PutStr msg_y_n
    54 00000067 51                  <1>  push ECX
    54 00000068 B9[25000000]        <1>  mov ECX,%1
    54 0000006D E8(00000000)        <1>  call proc_PutStr
    54 00000072 59                  <1>  pop ECX
    55                                  		GetStr inp_y_n
    55 00000073 56                  <1>  push ESI
    55 00000074 57                  <1>  push EDI
    55 00000075 BF[C8000000]        <1>  mov EDI,%1
    55 0000007A BE51000000          <1>  mov ESI,%2
    55 0000007F E8(00000000)        <1>  call proc_GetStr
    55 00000084 5F                  <1>  pop EDI
    55 00000085 5E                  <1>  pop ESI
    56 00000086 803D[C8000000]59        		cmp byte[inp_y_n],'Y'
    57 0000008D 0F846DFFFFFF            		je L1
    58 00000093 803D[C8000000]79        		cmp byte[inp_y_n],'y'
    59 0000009A 0F8460FFFFFF            		je L1
    60                                  done:
    61                                  	.EXIT
    61 000000A0 B801000000          <1>  mov EAX,1
    61 000000A5 31DB                <1>  xor EBX,EBX
    61 000000A7 CD80                <1>  int 0x80
